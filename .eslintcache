[{"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\index.js":"1","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\App.js":"2","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\reportWebVitals.js":"3","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Stack\\Stack.js":"4","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Task\\Task.js":"5","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\Context\\store.js":"6","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\hooks\\useLocalStorage.js":"7","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\GlobalTime\\GlobalTime.js":"8","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Heap\\Heap.js":"9","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Notes\\Notes.js":"10","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\CurrentTask\\CurrentTask.js":"11","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Notes\\Note.js":"12","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Header\\Header.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":605,"mtime":1610965821276,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":1036,"mtime":1610289923120,"results":"18","hashOfConfig":"15"},{"size":983,"mtime":1610881619795,"results":"19","hashOfConfig":"15"},{"size":6602,"mtime":1610966173734,"results":"20","hashOfConfig":"15"},{"size":646,"mtime":1610273409181,"results":"21","hashOfConfig":"15"},{"size":772,"mtime":1610531976945,"results":"22","hashOfConfig":"15"},{"size":1050,"mtime":1610359431152,"results":"23","hashOfConfig":"15"},{"size":1586,"mtime":1610965808095,"results":"24","hashOfConfig":"15"},{"size":1892,"mtime":1610531780202,"results":"25","hashOfConfig":"15"},{"size":233,"mtime":1610965415678,"results":"26","hashOfConfig":"15"},{"size":908,"mtime":1610965792776,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"4dk32x",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\index.js",[],["59","60"],"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\App.js",[],"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\reportWebVitals.js",[],"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Stack\\Stack.js",[],"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Task\\Task.js",["61"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { meetingContext } from '../../Context/store';\r\nimport './Task.css';\r\n\r\nconst Task = (props) => {\r\n  const { clock } = useContext(meetingContext);\r\n  const [timer, setTimer] = useState(Math.floor((new Date().getTime() - props.time) / 1000));\r\n\r\n  let time = clock(timer);\r\n  \r\n  useEffect(() => {\r\n    const id = window.setInterval(() => {\r\n      setTimer(Math.floor((new Date().getTime() - props.time) / 1000));\r\n    }, 30000);\r\n    console.log(timer)\r\n    return () => window.clearInterval(id);\r\n  }, [timer])\r\n\r\n\r\n  return (\r\n    <li className='task-item' key={props.id} onDoubleClick={props.changeList}>\r\n      {props.type !== 'heap' ? <div> <span className=\"duration-display\" > {time.minutes}:{time.seconds} </span> </div> : null}\r\n      <label className='task-title' >{props.title}</label>\r\n      <button className=\"remove\" onClick={props.remove}>X</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n\r\n","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\Context\\store.js",["62"],"import React, { useState, createContext, useEffect } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const meetingContext = createContext();\r\n\r\n\r\nconst MeetingContextProvider = (props) => {\r\n\r\n  const [stack, setStack] = useLocalStorage('stack', []);\r\n  const [heap, setHeap] = useLocalStorage('heap', []);\r\n  const [notes, setNotes] = useLocalStorage('notes', []);\r\n  const [stackHistory, setStackHistory] = useLocalStorage('stackHistory', []);\r\n  const [currentTaskTimer, setCurrentTaskTimer] = useState(stack[0] !== undefined ? Math.floor((new Date().getTime() - stack[stack.length - 1].time) / 1000) : 0);\r\n  let startingTime = new Date().getTime();\r\n\r\n  // Create a new stack task\r\n  const newStackHandler = (event) => {\r\n    if (event.which === 13 && event.target.value !== '') {\r\n      setStack([\r\n        ...stack,\r\n        { id: uuidv4(), type: 'stack', topic: event.target.value, time: new Date().getTime() }\r\n      ]);\r\n      setStackHistory([...stackHistory,`<li>${event.target.value}</li>`]);\r\n      event.target.value = '';\r\n      console.log(stack)\r\n      setCurrentTaskTimer(Math.floor((new Date().getTime() - new Date().getTime()) / 1000));\r\n    };\r\n  };\r\n\r\n  // Create a new heap task\r\n  const newHeapHandler = (event) => {\r\n    if (event.which === 13 && event.target.value !== '') {\r\n      setHeap([\r\n        ...heap,\r\n        { id: uuidv4(), type: 'heap', topic: event.target.value, time: new Date().getTime() }\r\n      ]);\r\n      event.target.value = '';\r\n    };\r\n  };\r\n\r\n  // Removes a task\r\n  const taskRemoveHandler = (id, type) => {\r\n    if (type === 'stack') {\r\n      const taskIndex = stack.findIndex(task => {\r\n        return task.id === id;\r\n      });\r\n\r\n      let tempList = [...stack];\r\n      tempList.splice(taskIndex, 1);\r\n      setStack(tempList);\r\n      console.log(taskIndex)\r\n      setCurrentTaskTimer(stack[taskIndex - 1] !== undefined ? Math.floor((new Date().getTime() - stack[taskIndex - 1].time) / 1000) : 0);\r\n    };\r\n\r\n    if (type === 'heap') {\r\n      const taskIndex = heap.findIndex(task => {\r\n        return task.id === id;\r\n      });\r\n\r\n      let tempList = [...heap];\r\n      tempList.splice(taskIndex, 1);\r\n      setHeap(tempList)\r\n      console.log(taskIndex)\r\n    };\r\n    return console.log('taskRmoveHandler: ', stack);\r\n  }\r\n\r\n  // converts getTime() to hours, minutes, seconds\r\n  const clock = (time) => {\r\n    let minutes = Math.floor(time / 60);\r\n    let seconds = Math.abs(time % 60);\r\n    let hours = Math.floor(time / 3600);\r\n    minutes = minutes.toString().length === 1 ? \"0\" + minutes : minutes;\r\n    seconds = seconds.toString().length === 1 ? \"0\" + seconds : seconds;\r\n    hours = hours.toString().length === 1 ? \"0\" + hours : hours;\r\n    return ({ hours: hours, minutes: minutes, seconds: seconds })\r\n  }\r\n\r\n  // remove last stack with the keyboard\r\n  const keyboardRemoveHandler = (e) => {\r\n    if (e.ctrlKey && e.shiftKey && e.which === 88) {\r\n      let stackLength = stack.length;\r\n      let tempStack = [...stack];\r\n      tempStack.splice(tempStack.length - 1, 1);\r\n      setStack(tempStack);\r\n      setCurrentTaskTimer(stack[stackLength - 2] !== undefined ? Math.floor((new Date().getTime() - stack[stackLength - 2].time) / 1000) : 0);\r\n      console.log(currentTaskTimer)\r\n    }\r\n  }\r\n\r\n  // remove from stack with the keyboard\r\n  useEffect(() => {\r\n    if (document) {\r\n      document.addEventListener('keydown', keyboardRemoveHandler);\r\n    }\r\n    return () => {\r\n      document.removeEventListener('keydown', keyboardRemoveHandler);\r\n    }\r\n  }, [stack]);\r\n\r\n  \r\n  // move task between heap and stack\r\n  const changeListHandler = (id, type) => {\r\n    // move task from stack to heap\r\n    if (type === 'stack') {\r\n      const taskIndex = stack.findIndex(task => {\r\n        return task.id === id;\r\n      });\r\n      setHeap([...heap, { id: stack[taskIndex].id, type: 'heap', topic: stack[taskIndex].topic, time: stack[taskIndex].time }]);\r\n\r\n      let tempStack = [...stack];\r\n      tempStack.splice(taskIndex, 1);\r\n      setStack(tempStack);\r\n      console.log('change to heap ', stack, '  ', heap)\r\n    };\r\n    // move task from heap to stack\r\n    if (type === 'heap') {\r\n      const taskIndex = heap.findIndex(task => {\r\n        return task.id === id;\r\n      });\r\n      setStack([...stack, { id: heap[taskIndex].id, type: 'stack', topic: heap[taskIndex].topic, time: new Date().getTime }]);\r\n      setStackHistory([...stackHistory, `<li>${heap[taskIndex].topic}</li>`]);\r\n\r\n      let tempHeap = [...heap];\r\n      tempHeap.splice(taskIndex, 1);\r\n      setHeap(tempHeap);\r\n      console.log('change to stack ', stack, '  ', heap)\r\n    };\r\n  }\r\n\r\n  const clearAllHandler = () => {\r\n    setStack([]);\r\n    setHeap([]);\r\n    setNotes([]);\r\n    setStackHistory([]);\r\n    window.location.reload()\r\n  }\r\n\r\n\r\n  const downloadSummaryHandler = () => {\r\n    const { htmlToText } = require('html-to-text');\r\n\r\n    // convert stack to HTML tags\r\n    const stackText = '<h3>Stack</h3><ul>' + stackHistory.join(' ') + '</ul>';\r\n    \r\n    // convert notes to HTML tags\r\n    let text = [];\r\n    for(let i = 0; i < notes.length; i++){\r\n      text.push(`<h5>${notes[i].topic}:</h5>`);\r\n      for(let j = 0; j < notes[i].notes.length; j++){\r\n        text.push(`<li>${notes[i].notes[j]}</li>`)\r\n      }\r\n    }\r\n    const notesText = '<h3>Notes</h3><ul>' + text.join(' ') + '</ul>';\r\n    console.log('notesText', notesText)\r\n    \r\n    // convert heap to HTML tags\r\n    let text2 = [];\r\n    heap.map((task)=>(text2.push(`<li>${task.topic}</li>`)));\r\n    const heapText = '<h3>Heap</h3><ul>' + text2.join(' ') + '</ul>';\r\n    const sum = htmlToText(stackText + notesText + heapText)\r\n\r\n    // create blob to download rtf file\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([sum], { type: \"text/plain\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"meetingSummary.rtf\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    // clearAllHandler();\r\n  }\r\n\r\n\r\n  return (\r\n    <meetingContext.Provider value={\r\n      {\r\n        stack,\r\n        setStack,\r\n        heap,\r\n        notes,\r\n        setNotes,\r\n        stackHistory,\r\n        startingTime,\r\n        newStackHandler,\r\n        newHeapHandler,\r\n        taskRemoveHandler,\r\n        changeListHandler,\r\n        clock,\r\n        currentTaskTimer,\r\n        setCurrentTaskTimer,\r\n        clearAllHandler,\r\n        downloadSummaryHandler\r\n      }\r\n    }>\r\n      {props.children}\r\n    </meetingContext.Provider>\r\n  );\r\n}\r\n\r\nexport default MeetingContextProvider;\r\n\r\n","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\GlobalTime\\GlobalTime.js",["63"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport './GlobalTime.css';\r\nimport { meetingContext } from '../../Context/store';\r\n\r\n\r\nconst GlobalTime = () => {\r\n  const { clock, startingTime } = useContext(meetingContext);\r\n\r\n  const [globalTimer, setGlobalTimer] = useState(Math.floor((new Date().getTime() - startingTime) / 1000));\r\n  let time = clock(globalTimer);\r\n\r\n  useEffect(() => {\r\n    const id = window.setInterval(() => {\r\n      setGlobalTimer(Math.floor((new Date().getTime() - startingTime) / 1000));\r\n    }, 60000);\r\n    console.log(globalTimer)\r\n    return () => window.clearInterval(id);\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div className='global-timer'>{time.hours}:{time.minutes}:{time.seconds}</div>\r\n  );\r\n}\r\n\r\nexport default GlobalTime;","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Heap\\Heap.js",[],"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Notes\\Notes.js",[],"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\CurrentTask\\CurrentTask.js",["64","65"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { meetingContext } from '../../Context/store';\r\nimport './CurrentTask.css';\r\n\r\n\r\nconst CurrentTask = () => {\r\n\r\n  const { stack, clock, currentTaskTimer, setCurrentTaskTimer } = useContext(meetingContext);\r\n\r\n  // Current task timer (every 30 secs)\r\n  useEffect(() => {\r\n    if (stack[0] !== undefined) {\r\n      const id = window.setInterval(() => {\r\n        setCurrentTaskTimer(Math.floor((new Date().getTime() - stack[stack.length - 1].time) / 1000));\r\n      }, 30000);\r\n      return () => window.clearInterval(id);\r\n    }\r\n  });\r\n\r\n  // Start bars count (every 60 secs)\r\n  let n = 0;\r\n  const [bars, setBars] = useState([]);\r\n  useEffect(() => {\r\n    if (stack[0] !== undefined) {\r\n      const id = window.setInterval(() => {\r\n        n += 1;\r\n        let tempBars = [...bars];\r\n        tempBars.push({ id: n });\r\n        setBars(tempBars);\r\n        console.log(bars)\r\n      }, 60000);\r\n      return () => window.clearInterval(id);\r\n    }\r\n  }, [bars]);\r\n  \r\n  // Restart bars count on stack change\r\n  useEffect(() => {\r\n    n = 0;\r\n    setBars([]);\r\n  },[stack])\r\n\r\n  let time = clock(currentTaskTimer);\r\n  console.log('current ', currentTaskTimer);\r\n\r\n  const taskExists = () => {\r\n    return (\r\n      <>\r\n        {time.minutes}:{time.seconds}\r\n      </>\r\n    )\r\n  };\r\n\r\n  const TimeBar = () => {\r\n    return (\r\n      <div className='time-bars'></div>\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div className='current-task-container'>\r\n      <div className='current-timer'><h4>{stack[0] !== undefined ? (taskExists()) : null}</h4></div>\r\n      <div className='current-title'><h1>{stack[0] !== undefined ? stack[stack.length - 1].topic : null}</h1></div>\r\n      <div className='current-task-background'>\r\n        {bars.map((bar, id) => (<TimeBar key={id} />))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CurrentTask;","C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Notes\\Note.js",[],"C:\\Users\\lital\\Documents\\react projects\\meeting-menagment-app\\src\\components\\Header\\Header.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":17,"column":6,"nodeType":"72","endLine":17,"endColumn":13,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":100,"column":6,"nodeType":"72","endLine":100,"endColumn":13,"suggestions":"75"},{"ruleId":"70","severity":1,"message":"76","line":19,"column":6,"nodeType":"72","endLine":19,"endColumn":8,"suggestions":"77"},{"ruleId":"70","severity":1,"message":"78","line":26,"column":14,"nodeType":"79","endLine":26,"endColumn":15},{"ruleId":"70","severity":1,"message":"78","line":38,"column":9,"nodeType":"79","endLine":38,"endColumn":10},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.time'. Either include it or remove the dependency array. If 'setTimer' needs the current value of 'props.time', you can also switch to useReducer instead of useState and read 'props.time' in the reducer.","ArrayExpression",["82"],"React Hook useEffect has a missing dependency: 'keyboardRemoveHandler'. Either include it or remove the dependency array.",["83"],"React Hook useEffect has missing dependencies: 'globalTimer' and 'startingTime'. Either include them or remove the dependency array.",["84"],"Assignments to the 'n' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [props.time, timer]",{"range":"91","text":"92"},"Update the dependencies array to be: [keyboardRemoveHandler, stack]",{"range":"93","text":"94"},"Update the dependencies array to be: [globalTimer, startingTime]",{"range":"95","text":"96"},[575,582],"[props.time, timer]",[3591,3598],"[keyboardRemoveHandler, stack]",[632,634],"[globalTimer, startingTime]"]